

import re
from datetime import datetime

import google_auth_oauthlib.flow
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError

from config.reader import get_config

YOUTUBE_API_SERVICE_NAME = get_config("youtube", "YOUTUBE_API_SERVICE_NAME")
YOUTUBE_API_VERSION = get_config("youtube", "YOUTUBE_API_VERSION")
YOUTUBE_URL = get_config("youtube", "YOUTUBE_URL")
CLIENT_SECRETS_FILE = 'youtube_secret.json'
scopes = ["https://www.googleapis.com/auth/youtube.force-ssl"]
SECRETS = get_config("youtube", "SECRETS")


class YoutubeAPIError(Exception):
    pass


class Youtube:
    _videos = {}

    def __init__(self, key):
        self.yt = build(YOUTUBE_API_SERVICE_NAME, YOUTUBE_API_VERSION, developerKey=key)
        # regex validation filter terms
        # plain text query terms
        self.filterTerms = {
            "KEXP": [
                r"(?i)KEXP.+?Full[\s\W]+?Performance",
                r"(?i)Full[\s\W]+?Performance.+?KEXP.+?",
            ],
            "KCRW": [r"(?i)KCRW"],
            "NPR tiny desk": [r"(?i)NPR.+?Tiny\s+Desk"],
            "Like A Version": [r"(?i){}.+?Like\s+A\s+Version"],
            "Sofar": [r"(?i){}.+?\|.+?Sofar"],
            "Mahogany Session": [r"(?i){}.+?\|\s+Mahogany Session"],
            "WFUV": [r"(?i)Live\s+at\s+WFUV"],
            "EQX House Sessions": [r"(?i)EQX\sHouse\sSessions"],
            "Audiotree": [r"(?i)on\sAudiotree\sLive"],
            "KXT": [r"(?i)KXT\sLive\sSessions"]
        }

    @property
    def videos(self):
        return self._videos

    def search(self, query):
        for term, filters in self.filterTerms.items():
            try:
                response = (
                    self.yt.search()
                        .list(
                        q="{} {}".format(query, term), part="id,snippet", maxResults=10
                    ).execute()
                )
            except HttpError as e:
                raise (YoutubeAPIError(str(e)))
            # iterate response items
            for result in response.get("items", []):
                if result["id"]["kind"] == "youtube#video":
                    for filter_ in filters:
                        if re.search(filter_.format(query), result["snippet"]["title"]) and re.search(
                                query, result["snippet"]["title"]
                        ):
                            if not result["id"]["videoId"] in self._videos:
                                self._videos[result["id"]["videoId"]] = result["snippet"]["title"]

    def create_playlist(self, items):
        playlist_body = {
            "snippet": {
                "title": "Lively autogenerated playlist - {}".format(datetime.now().strftime("%Y-%m-%d")),
                "description": "This is an autogenerated playlist by Lively. github.com/cxmplex/Lively",
                "status": {
                    "privacyStatus": "private"
                }
            }
        }
        flow = google_auth_oauthlib.flow.InstalledAppFlow.from_client_secrets_file(SECRETS[0], scopes)
        credentials = flow.run_console()
        try:
            self.yt = build(YOUTUBE_API_SERVICE_NAME, YOUTUBE_API_VERSION, credentials=credentials)
            request = self.yt.playlists().insert(
                part="snippet,status",
                body=playlist_body
            )
            response = request.execute()
        except Exception as e:
            raise YoutubeAPIError(str(e))

        playlist_id = response['id']
        if not playlist_id:
            raise YoutubeAPIError('Failed to create playlist')

        for item in items:
            body = {
                "snippet": {
                    "playlistId": playlist_id,
                    "position": 0,
                    "resourceId": {
                        "kind": "youtube#video",
                        "videoId": item
                    }
                }
            }
            should_break = False
            while not should_break:
                try:
                    request = self.yt.playlistItems().insert(
                        part="snippet",
                        body=body
                    )
                    response = request.execute()
                    if not response:
                        raise YoutubeAPIError("Invalid PlaylistItems addition.")
                    should_break = True
                except Exception:
                    secret = SECRETS[0]
                    SECRETS.remove(secret)
                    flow = google_auth_oauthlib.flow.InstalledAppFlow.from_client_secrets_file(SECRETS[0], scopes)
                    credentials = flow.run_console()
                    self.yt = build(YOUTUBE_API_SERVICE_NAME, YOUTUBE_API_VERSION, credentials=credentials)
        return True
